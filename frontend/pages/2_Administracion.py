import streamlit as st
import requests
import os
import time

# --- Configuraci√≥n de la P√°gina ---
# No usamos st.set_page_config() aqu√≠, ya se llam√≥ en app.py
st.title("Panel de Administraci√≥n üõ°Ô∏è")
st.markdown("""
Esta p√°gina permite ejecutar operaciones cr√≠ticas del sistema, como el 
re-entrenamiento de los modelos de Machine Learning.
""")

# --- URL del Backend ---
# Definir la URL del nuevo endpoint que crearemos en el backend
BACKEND_HOST = os.getenv("BACKEND_HOST", "127.0.0.1")
BACKEND_PORT = os.getenv("BACKEND_PORT", "5000")
# Este es el NUEVO endpoint que debemos crear en routes.py
BACKEND_URL_RETRAIN = f"http://{BACKEND_HOST}:{BACKEND_PORT}/api/v1/trigger_retraining"


# --- L√≥gica de Contrase√±a Simple ---
def check_password():
    """Devuelve True si el usuario est√° autenticado, sino muestra el formulario de contrase√±a."""
    
    # Usar st.session_state para mantener el estado de autenticaci√≥n
    if "password_correct" not in st.session_state:
        st.session_state.password_correct = False

    # Si no est√° autenticado, mostrar el formulario de login
    if not st.session_state.password_correct:
        st.info("Por favor, ingrese la contrase√±a de administrador para continuar.")
        with st.form("login_form"):
            password = st.text_input("Contrase√±a", type="password")
            submitted = st.form_submit_button("Ingresar")

            if submitted:
                # --- CONTRASE√ëA DE MVP ---
                # Esta es una contrase√±a simple para el MVP.
                # En un sistema real, esto debe ser manejado de forma segura (variables de entorno, hash).
                if password == "admin123": 
                    st.session_state.password_correct = True
                    # Re-ejecutar el script para recargar la p√°gina en estado autenticado
                    st.rerun() 
                else:
                    st.error("Contrase√±a incorrecta.")
        return False # No est√° autenticado
    else:
        return True # Est√° autenticado

# --- Mostrar Contenido de Administraci√≥n solo si la contrase√±a es correcta ---
if check_password():

    st.success("Autenticaci√≥n exitosa. Panel de administrador desbloqueado.")
    
    # Contenedor para la acci√≥n de re-entrenamiento
    with st.container(border=True):
        st.subheader("ü§ñ Re-entrenamiento del Modelo")
        st.markdown("""
        Presione este bot√≥n para forzar al sistema a re-entrenar los modelos de predicci√≥n (MLP y XGBoost) 
        utilizando **todos los datos** actualmente disponibles en la base de datos `ventas_historicas`.
        """)
        st.warning("""
        **Advertencia:** Esta operaci√≥n es intensiva y no se puede deshacer.
        1.  Puede tardar varios minutos en completarse.
        2.  Reemplazar√° los modelos actuales que est√°n en producci√≥n.
        3.  Se recomienda realizar esta acci√≥n solo despu√©s de una carga de datos significativa.
        """)
        
        # El bot√≥n de re-entrenamiento
        if st.button("Iniciar Re-entrenamiento del Modelo", type="primary", use_container_width=True):
            try:
                # Mostrar un spinner mientras el backend trabaja
                with st.spinner("Iniciando re-entrenamiento... Esto puede tardar varios minutos. Por favor, no cierre esta ventana."):
                    
                    # Llamar al nuevo endpoint del backend
                    # Usamos un timeout largo (600 segundos = 10 minutos) porque el entrenamiento puede tardar
                    response = requests.post(BACKEND_URL_RETRAIN, timeout=600)

                    # Manejar la respuesta del backend
                    if response.status_code == 200:
                        st.success(f"‚úÖ ¬°Re-entrenamiento completado con √©xito!")
                        st.json(response.json()) # Mostrar el JSON de respuesta (que tendr√° el mensaje y m√©tricas)
                    else:
                        # Mostrar el error devuelto por el backend
                        error_msg = response.json().get('error', 'Error desconocido del backend.')
                        st.error(f"Error {response.status_code}: {error_msg}")
            
            except requests.exceptions.ConnectionError:
                st.error(f"Error de Conexi√≥n: No se pudo conectar al backend en {BACKEND_URL_RETRAIN}. ¬øEst√° el backend (python -m backend.app) corriendo?")
            except requests.exceptions.Timeout:
                st.error("Error: La solicitud de re-entrenamiento super√≥ el tiempo l√≠mite (10 minutos). El servidor puede seguir entrenando en segundo plano.")
            except Exception as e:
                st.error(f"Ocurri√≥ un error inesperado al contactar el backend: {e}")
