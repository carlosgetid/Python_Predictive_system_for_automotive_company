import streamlit as st

# --- Configuraci칩n de la P치gina ---
# Esta debe ser la PRIMERA llamada de Streamlit en el script.
st.set_page_config(
    page_title="Sistema Predictivo | Inicio",
    page_icon="游늵",  # 칈cono para la pesta침a del navegador
    layout="wide"    # Usar el ancho completo de la p치gina
)

# --- Barra Lateral (Sidebar) ---
# Contenido profesional y neutral
with st.sidebar:
    st.header("Acerca de la Aplicaci칩n")
    st.markdown("""
    Esta plataforma utiliza modelos de Machine Learning para 
    generar pron칩sticos de demanda y optimizar la gesti칩n 
    de inventario.
    """)
    
    st.divider() # Un separador visual
    
    st.info("Versi칩n 1.0 (MVP)")
    
    st.divider() # Un separador visual
    
    # Asumiendo el nombre de la empresa de la tesis, si no, se puede cambiar
    st.caption("춸 2025 Importaciones Centrales Teo. \nTodos los derechos reservados.")

# --- Contenido Principal de la P치gina ---

# 1. T칤tulo y Resumen (Profesionalizado)
st.title("Sistema Predictivo para la Gesti칩n de Inventarios 游늵")
st.subheader("Plataforma de Optimizaci칩n de Stock y Pron칩stico de Demanda") # <-- Texto actualizado
st.markdown("""
Esta herramienta aplica un modelo h칤brido de Machine Learning (MLP y XGBoost) para pronosticar la demanda futura de productos a nivel de SKU. 
El objetivo es resolver la problem치tica de gesti칩n de inventarios ineficiente (sobrestock y quiebres de stock), reemplazando el an치lisis manual por un pron칩stico estad칤stico basado en datos transaccionales.
""") # <-- Texto actualizado

st.divider()

# 2. Gu칤a de Uso
st.header("Gu칤a de Uso del Sistema")
st.markdown("Siga estos pasos para utilizar la aplicaci칩n:")

# (El resto del contenido se mantiene igual, ya que es neutral)

with st.container(border=True):
    st.subheader("游늯 Paso 1: Carga de Datos")
    st.markdown("""
    Navegue a la p치gina **'1_Carga_de_Datos'** en la barra lateral. 
    
    Aqu칤 podr치 subir los archivos Excel transaccionales (ej. `Factura_Importacion_PLUS_*.xlsx`). El sistema leer치 autom치ticamente la hoja **'Detalle'** y guardar치 los datos hist칩ricos en la base de datos.
    """)
    st.warning("Nota: Este paso solo es necesario si se dispone de nuevos datos hist칩ricos.")

st.write("") # A침adir un espacio

with st.container(border=True):
    st.subheader("游뱄 Paso 2: Entrenamiento del Modelo")
    st.markdown("""
    Este paso se realiza **fuera de esta aplicaci칩n web** (en el terminal del servidor) y debe ser ejecutado por un administrador t칠cnico.
    """)
    st.info("""
    **Instrucci칩n para el Administrador:**
    Despu칠s de cargar nuevos datos en el Paso 1, debe detener el servidor backend y ejecutar el siguiente comando en la terminal para re-entrenar los modelos:
    ```bash
    python -m backend.ml_core.training
    ```
    Una vez completado, reinicie el servidor backend (`python -m backend.app`) para que las nuevas predicciones reflejen la informaci칩n actualizada.
    """)

st.write("") # A침adir un espacio

with st.container(border=True):
    st.subheader("游늳 Paso 3: Visualizaci칩n de Predicci칩n")
    st.markdown("""
    Navegue a la p치gina **'2_Visualizacion_de_Prediccion'** en la barra lateral.
    
    Ingrese un **SKU (ID de Producto)** y una **fecha futura** para generar un pron칩stico de demanda en unidades. Podr치 ver la predicci칩n junto al historial de ventas de ese producto.
    """)

